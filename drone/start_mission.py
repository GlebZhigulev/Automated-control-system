import subprocess
import os
import time
import json
import sys
from pymavlink import mavutil

VIDEO_SCRIPT = "record_video.py"
TELEMETRY_SCRIPT = "log_telemetry.py"
CONFIG_PATH = "mission_config.json"
ABORT_FLAG = "abort.flag"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
if not os.path.exists(CONFIG_PATH):
    print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–∏—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    sys.exit(1)

with open(CONFIG_PATH) as f:
    config = json.load(f)

route = config["route"]
video_path = config.get("video_path", "/home/pi/missions/flight.mp4")
telemetry_path = config.get("telemetry_path", "/home/pi/missions/telemetry.csv")
speed = config.get("speed")

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PX4 ===
connection = mavutil.mavlink_connection('udp:localhost:14540')
connection.wait_heartbeat()
print("[üì°] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É PX4")

# === –û—á–∏—Å—Ç–∫–∞ –º–∏—Å—Å–∏–∏ ===
connection.mav.mission_clear_all_send(1, 1)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ ===
for i, wp in enumerate(route):
    connection.mav.mission_item_int_send(
        1, 1, i,
        mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
        mavutil.mavlink.MAV_CMD_NAV_WAYPOINT,
        0, 1, 0, 0, 0, 0, 0,
        int(wp["lat"] * 1e7),
        int(wp["lon"] * 1e7),
        wp["alt"]
    )
    print(f"[+] –¢–æ—á–∫–∞ {i}: {wp['lat']}, {wp['lon']}, {wp['alt']}")

connection.mav.mission_count_send(1, 1, len(route))
print("[‚úì] –ú–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–≤—Ç–æ–ø–∏–ª–æ—Ç—É")

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ ===
if speed:
    connection.mav.command_long_send(
        1, 1,
        mavutil.mavlink.MAV_CMD_DO_CHANGE_SPEED,
        0, 1, speed,
        -1, 0, 0, 0, 0
    )
    print(f"[‚Üí] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {speed} –º/—Å")
else:
    print("[‚Ñπ] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å PX4")

# === –ó–∞–ø—É—Å–∫ –º–∏—Å—Å–∏–∏ ===
time.sleep(2)
connection.mav.command_long_send(
    1, 1,
    mavutil.mavlink.MAV_CMD_MISSION_START,
    0, 0, 0, 0, 0, 0, 0
)
print("[‚ñ∂] –ú–∏—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞")

# === –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ ===
video_proc = subprocess.Popen(["python3", VIDEO_SCRIPT, video_path])
telemetry_proc = subprocess.Popen(["python3", TELEMETRY_SCRIPT, telemetry_path])

# === –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ===
while True:
    if os.path.exists(ABORT_FLAG):
        print("[üõë] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∞–≤–∞—Ä–∏–π–Ω–æ–π –ø–æ—Å–∞–¥–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏.")
        break
    if video_proc.poll() is not None and telemetry_proc.poll() is not None:
        break
    time.sleep(1)

# === –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ===
for proc in [video_proc, telemetry_proc]:
    try:
        proc.terminate()
        proc.wait(timeout=5)
    except Exception:
        proc.kill()

print("[‚úÖ] –ú–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
