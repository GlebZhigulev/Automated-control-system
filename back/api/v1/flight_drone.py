from fastapi import APIRouter, WebSocket, WebSocketDisconnect, HTTPException, Depends, UploadFile, File
from pydantic import BaseModel
from sqlalchemy.orm import Session
from typing import Dict
import asyncio
import json
import os
from datetime import datetime
from back.crud import crud_routes
from back.api.v1.auth import get_current_user
from back.database import get_db
from back.models import Route, WayPoint
from back.crud import crud_flight_plans, crud_videos, crud_telemetry

router = APIRouter(prefix="/flight/drone", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–æ–º"])

connected_drones: Dict[str, WebSocket] = {}
drone_state: Dict[str, Dict] = {}

SAVE_DIR = "/home/server/received_files"
os.makedirs(SAVE_DIR, exist_ok=True)

class DroneActionRequest(BaseModel):
    type: str
    flight_plan_id: int | None = None

@router.websocket("/ws/drone")
async def drone_ws(websocket: WebSocket):
    await websocket.accept()
    drone_id = websocket.query_params.get("drone_id")
    if not drone_id:
        await websocket.close()
        return

    connected_drones[drone_id] = websocket
    drone_state[drone_id] = {
        "status": "–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é",
        "telemetry": {},
        "mission": {"current_waypoint": 0, "total_waypoints": 0, "status": "–æ–∂–∏–¥–∞–Ω–∏–µ"}
    }

    try:
        while True:
            data = await websocket.receive_text()
            try:
                payload = json.loads(data)
                msg_type = payload.get("type")

                if msg_type == "telemetry":
                    drone_state[drone_id]["telemetry"] = payload.get("data", {})

                elif msg_type == "mission":
                    drone_state[drone_id]["mission"] = payload.get("data", {})

                elif msg_type == "status":
                    drone_state[drone_id]["status"] = payload.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            except json.JSONDecodeError:
                continue
    except WebSocketDisconnect:
        connected_drones.pop(drone_id, None)
        drone_state.pop(drone_id, None)

from back.crud import crud_routes, crud_flight_plans

@router.post("/{id}/actions", summary="–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ë–ü–õ–ê")
def drone_action(
    id: int,
    data: DroneActionRequest,
    user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    if user["role"] != "operator":
        raise HTTPException(status_code=403, detail="Access denied")

    drone_id = f"drone-{id}"
    ws = connected_drones.get(drone_id)
    if not ws:
        raise HTTPException(status_code=404, detail="–ë–ü–õ–ê –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")

    allowed_commands = {"prepare_mission", "start", "Emergency_stop", "mission_complete", "shutdown"}

    if data.type not in allowed_commands:
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞: {data.type}")

    message = {"command": data.type}

    # üß≠ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–∏—Å—Å–∏–∏
    if data.type == "prepare_mission":
        if not data.flight_plan_id:
            raise HTTPException(status_code=400, detail="–ù—É–∂–µ–Ω flight_plan_id")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—ë—Ç–∞ –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        updated = crud_flight_plans.update_flight_status(db, data.flight_plan_id, status="in_progress")
        if not updated:
            raise HTTPException(status_code=404, detail="–ü–ª–∞–Ω –ø–æ–ª—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø–ª–∞–Ω–æ–º
        route = crud_routes.get_route_by_id(db, updated.route_id)
        if not route or not route.waypoints:
            raise HTTPException(status_code=404, detail="–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç
        route_data = [
            {"lat": wp.latitude, "lon": wp.longitude, "alt": wp.altitude}
            for wp in route.waypoints
        ]

        message = {
            "command": "prepare_mission",
            "route": route_data
        }

    # ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏
    elif data.type == "mission_complete":
        if not data.flight_plan_id:
            raise HTTPException(status_code=400, detail="–ù—É–∂–µ–Ω flight_plan_id –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏")

        updated = crud_flight_plans.update_flight_status(db, data.flight_plan_id, status="completed")
        if not updated:
            raise HTTPException(status_code=404, detail="–ü–ª–∞–Ω –ø–æ–ª—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # üîÅ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ë–ü–õ–ê
    asyncio.create_task(ws.send_text(json.dumps(message)))
    return {"message": f"–ö–æ–º–∞–Ω–¥–∞ {data.type} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ë–ü–õ–ê {drone_id}"}


@router.get("/{id}/telemetry", summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –ë–ü–õ–ê")
def get_telemetry(id: int, user: dict = Depends(get_current_user)):
    if user["role"] != "operator":
        raise HTTPException(status_code=403, detail="Access denied")
    drone_id = f"drone-{id}"
    state = drone_state.get(drone_id)
    return state.get("telemetry", {}) if state else {}

@router.get("/{id}/status", summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
def get_status(id: int, user: dict = Depends(get_current_user)):
    if user["role"] != "operator":
        raise HTTPException(status_code=403, detail="Access denied")
    drone_id = f"drone-{id}"
    state = drone_state.get(drone_id)
    return {
        "connected": bool(state),
        "status": state.get("status") if state else "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    }

@router.get("/{id}/mission-status", summary="–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏")
def mission_status(id: int, user: dict = Depends(get_current_user)):
    if user["role"] != "operator":
        raise HTTPException(status_code=403, detail="Access denied")
    drone_id = f"drone-{id}"
    state = drone_state.get(drone_id)
    return state.get("mission", {}) if state else {}



VIDEO_BASE_DIR = "storage/videos"
TELEMETRY_BASE_DIR = "storage/telemetry"
os.makedirs(VIDEO_BASE_DIR, exist_ok=True)
os.makedirs(TELEMETRY_BASE_DIR, exist_ok=True)

@router.post("/{drone_id}/upload", summary="–ü—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ —Å –¥—Ä–æ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–ª—ë—Ç–∞")
async def upload_files_from_drone(
    drone_id: int,
    video: UploadFile = File(...),
    telemetry: UploadFile = File(...),
    user: dict = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    if user["role"] not in ["operator", "drone"]:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

    # üîç 1. –ù–∞–π–¥—ë–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª–µ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞
    flight = crud_flight_plans.get_active_flight_plan_by_drone(db, drone_id)
    if not flight:
        raise HTTPException(status_code=404, detail="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–æ–ª–µ—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ë–ü–õ–ê")

    flight_id = flight.id
    operator_id = flight.operator_id

    # üíæ 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –≤ –ë–î
    video_metadata = crud_videos.save_video_metadata(
        db=db,
        filename="temp.mp4",  # –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ
        flight_plan_id=flight_id,
        operator_id=operator_id
    )
    video_id = video_metadata.id

    # üìÅ 3. –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    video_dir = os.path.join(VIDEO_BASE_DIR, f"flight_{flight_id}")
    telemetry_dir = os.path.join(TELEMETRY_BASE_DIR, f"flight_{flight_id}")
    os.makedirs(video_dir, exist_ok=True)
    os.makedirs(telemetry_dir, exist_ok=True)

    # üì¶ 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
    final_video_path = os.path.join(video_dir, f"video_{video_id}.mp4")
    final_telemetry_path = os.path.join(telemetry_dir, f"telemetry_{video_id}.csv")

    with open(final_video_path, "wb") as f:
        f.write(await video.read())
    with open(final_telemetry_path, "wb") as f:
        f.write(await telemetry.read())

    # üîÅ 5. –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –∑–∞–ø–∏—Å–∏ –æ –≤–∏–¥–µ–æ
    video_metadata.file_path = final_video_path
    db.commit()

    telemetry_entry = crud_telemetry.create_telemetry(db, TelemetryCreate(
    file_path=final_telemetry_path,
    flight_request_id=flight_id
))

    return {
        "message": "–í–∏–¥–µ–æ –∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        "flight_id": flight_id,
        "video_id": video_id,
        "paths": {
            "video": final_video_path,
            "telemetry": final_telemetry_path
        }
    }