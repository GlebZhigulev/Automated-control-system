from fastapi import APIRouter, HTTPException, status, Depends
from sqlalchemy.orm import Session
from typing import List
from datetime import datetime
import secrets
import string

from back.models import Drone as DroneModel
from back.schemas import DroneCreate, DroneResponse
from back.database import get_db
from back.api.v1.auth import get_current_user, hash_password
from back.schemas import UserCreate
from back.crud.crud_users import create_user
from back.crud.crud_drone import create_drone as db_create_drone, get_all_drones, get_drone_by_id, update_drone, delete_drone

router = APIRouter(prefix="/drones", tags=["–ë–ü–õ–ê"])

@router.post("/", response_model=dict, status_code=status.HTTP_201_CREATED, summary="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ë–ü–õ–ê")
def create_drone(drone: DroneCreate, db: Session = Depends(get_db), user: dict = Depends(get_current_user)):
    if user["role"] != "admin":
        raise HTTPException(status_code=403, detail="Access denied")

    new_drone = db_create_drone(db, drone.name, drone.model, drone.serial_number)

    username = f"drone-{new_drone.id}"

    # üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è (10 —Å–∏–º–≤–æ–ª–æ–≤: –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
    alphabet = string.ascii_letters + string.digits
    password = ''.join(secrets.choice(alphabet) for _ in range(10))

    drone_user = UserCreate(username=username, password=password, role="drone")
    hashed_pw = hash_password(password)
    create_user(db, drone_user, hashed_pw)

    return {
        "id": new_drone.id,
        "message": "–ë–ü–õ–ê –∏ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        "credentials": {
            "username": username,
            "password": password 
        }
    }

@router.get("/", response_model=List[DroneResponse], summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ë–ü–õ–ê")
def read_drones(db: Session = Depends(get_db), user: dict = Depends(get_current_user)):
    if user["role"] not in ["admin", "operator", "analyst"]:
        raise HTTPException(status_code=403, detail="Access denied")
    return get_all_drones(db)

@router.get("/{drone_id}", response_model=DroneResponse, summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–ü–õ–ê")
def read_drone(drone_id: int, db: Session = Depends(get_db), user: dict = Depends(get_current_user)):
    if user["role"] not in ["admin", "operator", "analyst"]:
        raise HTTPException(status_code=403, detail="Access denied")
    drone = get_drone_by_id(db, drone_id)
    if not drone:
        raise HTTPException(status_code=404, detail="–ë–ü–õ–ê –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return drone

@router.put("/{drone_id}", response_model=DroneResponse, summary="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–ü–õ–ê")
def update_drone_info(drone_id: int, updates: dict, db: Session = Depends(get_db), user: dict = Depends(get_current_user)):
    if user["role"] != "admin":
        raise HTTPException(status_code=403, detail="Access denied")
    updated = update_drone(db, drone_id, updates)
    if not updated:
        raise HTTPException(status_code=404, detail="–ë–ü–õ–ê –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return updated

@router.delete("/{drone_id}", summary="–£–¥–∞–ª–µ–Ω–∏–µ –ë–ü–õ–ê")
def delete_drone_entry(drone_id: int, db: Session = Depends(get_db), user: dict = Depends(get_current_user)):
    if user["role"] != "admin":
        raise HTTPException(status_code=403, detail="Access denied")
    deleted = delete_drone(db, drone_id)
    if not deleted:
        raise HTTPException(status_code=404, detail="–ë–ü–õ–ê –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"message": "–ë–ü–õ–ê —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"}